@model WebNutricion.Models.planificacionNutricional
<style>
    .invisible-hr {
        border: none;
        height: 1px;
        /* Puedes ajustar el color transparente según tu preferencia */
        background-color: transparent;
        margin: 10px 0;
    }
    body {
        background-image: url(/WebStyleMain/assets/img/pexels-alex-green-5699486.jpg);
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
    }
</style>

<hr class="invisible-hr">
<hr class="invisible-hr">
<hr class="invisible-hr">
<hr class="invisible-hr">

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <hr />
                <h1 class="text-center">Planificación Nutricional</h1>
                <form id="calorieCalculator">
                    <div class="row">
                        <div class="col-md-4">
                            <label for="peso">Peso (kg):</label>
                            <input type="number" class="form-control" id="peso" required>
                        </div>
                        <div class="col-md-4">
                            <label for="altura">Altura (cm):</label>
                            <input type="number" class="form-control" id="altura" required>
                        </div>
                        <div class="col-md-4">
                            <label for="edad">Edad (años):</label>
                            <input type="number" class="form-control" id="edad" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="genero">Género:</label>
                            <select class="form-control" id="genero">
                                <option value="hombre">Hombre</option>
                                <option value="mujer">Mujer</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="actividad">Nivel de actividad:</label>
                            <select class="form-control" id="actividad">
                                <option value="poco">Poco o ningún ejercicio</option>
                                <option value="ligero">Ejercicio ligero (1 - 3 días por semana)</option>
                                <option value="moderado">Ejercicio moderado (3 - 5 días por semana)</option>
                                <option value="fuerte">Ejercicio fuerte (6 - 7 días por semana)</option>
                                <option value="muy fuerte">Ejercicio muy fuerte (dos veces al día, entrenamientos muy duros)</option>
                            </select>
                        </div>
                    </div>
                    <hr class="invisible-hr">

                    <div class="text-center">
                        <button type="button" class="btn btn-primary" onclick="calcular()">Calcular</button>
                    </div>
                </form>
                <div id="resultado"></div>
            </div>
        </div>
    </div>



    <hr class="invisible-hr">
    <hr class="invisible-hr">

    <div style="width: 50%; margin: auto;">
        <form class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Peso</texto>

                        @Html.EditorFor(model => model.peso, new { htmlAttributes = new { @class = "form-control", @id = "pesoModel" } })
                        @Html.ValidationMessageFor(model => model.peso, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Altura</texto>
                        @Html.EditorFor(model => model.altura, new { htmlAttributes = new { @class = "form-control", @id = "alturaModel" } })
                        @Html.ValidationMessageFor(model => model.altura, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Indice de Masa Corporal</texto>
                        @Html.EditorFor(model => model.IMC, new { htmlAttributes = new { @class = "form-control", @id = "imcModel" } })
                        @Html.ValidationMessageFor(model => model.IMC, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Grasa Corporal</texto>
                        @Html.EditorFor(model => model.grasacorporal, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.grasacorporal, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Metabolismo Basal</texto>
                        @Html.EditorFor(model => model.metabolismobasal, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.metabolismobasal, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Calorias Diarias</texto>
                        @Html.EditorFor(model => model.caloriasdiarias, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.caloriasdiarias, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Proteinas</texto>
                        @Html.EditorFor(model => model.proteinas, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.proteinas, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Carbohidratos</texto>
                        @Html.EditorFor(model => model.carbohidratos, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.carbohidratos, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Grasas</texto>
                        @Html.EditorFor(model => model.grasas, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.grasas, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group">
                        <texto>Objetivo</texto>
                        @Html.EditorFor(model => model.objetivo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.objetivo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.fecha, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.fecha, new { htmlAttributes = new { @class = "form-control", @Value = DateTime.Now.ToShortDateString() } })
                        @Html.ValidationMessageFor(model => model.fecha, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="text mb-1" style="font-size: 14px; color: #26798e; display: none;">
                        @Html.LabelFor(model => model.idUser, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.idUser, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.idUser, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </div>
        </form>

    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
</div>
<script>
    function calcular() {
        var peso = parseFloat(document.getElementById("peso").value);
        var altura = parseFloat(document.getElementById("altura").value);
        var edad = parseInt(document.getElementById("edad").value);
        var genero = document.getElementById("genero").value;
        var actividad = document.getElementById("actividad").value;
        var TMB;

        if (genero === "hombre") {
            TMB = (10 * peso) + (6.25 * altura) - (5 * edad) + 5;
        } else if (genero === "mujer") {
            TMB = (10 * peso) + (6.25 * altura) - (5 * edad) - 161;
        } else {
            document.getElementById("resultado").innerHTML = "Género no válido";
            return;
        }

        var caloriasDiarias;
        switch (actividad) {
            case "poco":
                caloriasDiarias = TMB * 1.2;
                break;
            case "ligero":
                caloriasDiarias = TMB * 1.375;
                break;
            case "moderado":
                caloriasDiarias = TMB * 1.55;
                break;
            case "fuerte":
                caloriasDiarias = TMB * 1.725;
                break;
            case "muy fuerte":
                caloriasDiarias = TMB * 1.9;
                break;
            default:
                caloriasDiarias = "Nivel de actividad no válido";
        }

        // Calcular IMC
        var alturaMetros = altura / 100;
        var IMC = peso / (alturaMetros * alturaMetros);

        // Redondear IMC y llenar campo correspondiente
        var IMCRounded = Math.round(IMC);
        document.getElementById("imcModel").value = IMCRounded;

        // Llenar campos de peso y altura en el formulario
        document.getElementById("pesoModel").value = peso;
        document.getElementById("alturaModel").value = altura;

        // Actualizar campos metabolismobasal y caloriasdiarias
        document.getElementById("metabolismobasal").value = TMB.toFixed(0); // Redondear sin decimales
        document.getElementById("caloriasdiarias").value = caloriasDiarias.toFixed(0); // Redondear sin decimales

        document.getElementById("resultado").innerHTML = "Tu TMB es: " + TMB.toFixed(2) + " kcal <br>Tu necesidad calórica diaria es: " + caloriasDiarias.toFixed(2) + " kcal";
    }
</script>