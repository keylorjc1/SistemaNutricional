@model WebNutricion.Models.planificacionNutricional

@{
    ViewBag.Title = "Create";
}
<style>
    .invisible-hr {
        border: none;
        height: 1px;
        background-color: transparent;
        margin: 10px 0;
    }

    body {
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
    }
</style>

<hr class="invisible-hr">
<hr class="invisible-hr">
<hr class="invisible-hr">
<hr class="invisible-hr">
<h1 style="text-align: center; font-weight: bold;">Editar Datos Nutricionales</h1>
<head>

    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">

</head>
<style>
    /* Estilos adicionales personalizados */
    body {
        padding-top: 50px;
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
    }

    #calorieCalculator {
    }
</style>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
<body>
    <div class="form-row">
        <div class="container">
            <h1 class="text-center">Calculadora de Calorías Diarias y IMC</h1>
            <form id="calorieCalculator">
                <div class="form-group row">
                    <label for="peso" class="col-sm-4 col-form-label">Peso (kg)</label>
                    <div class="col-sm-4">
                        <input type="number" class="form-control" id="peso" required>
                    </div>
                </div>

                <div class="form-group row">
                    <label for="altura" class="col-sm-4 col-form-label">Altura (cm):</label>
                    <div class="col-sm-4">
                        <input type="number" class="form-control" id="altura" required>
                    </div>
                </div>

                <div class="form-group row">
                    <label for="edad" class="col-sm-4 col-form-label">Edad (años):</label>
                    <div class="col-sm-4">
                        <input type="number" class="form-control" id="edad" required>
                    </div>
                </div>

                <div class="form-group row">
                    <label for="genero" class="col-sm-4 col-form-label">Género:</label>
                    <div class="col-sm-4">
                        <select class="form-control" id="genero">
                            <option value="hombre">Hombre</option>
                            <option value="mujer">Mujer</option>
                        </select>
                    </div>
                </div>

                <div class="form-group row">
                    <label for="actividad" class="col-sm-4 col-form-label">Nivel de actividad:</label>
                    <div class="col-sm-4">
                        <select class="form-control" id="actividad">
                            <option value="poco">Poco o ningún ejercicio</option>
                            <option value="ligero">Ejercicio ligero (1 - 3 días por semana)</option>
                            <option value="moderado">Ejercicio moderado (3 - 5 días por semana)</option>
                            <option value="fuerte">Ejercicio fuerte (6 - 7 días por semana)</option>
                            <option value="muy fuerte">Ejercicio muy fuerte (dos veces al día, entrenamientos muy duros)</option>
                        </select>
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-sm-12 text-center">
                        <button type="button" class="btn btn-primary" onclick="calcular()">Calcular</button>
                    </div>
                </div>
            </form>

            <div id="resultado"></div>
        </div>


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="container">

            <div class="form-group row">
                <texto>Peso</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.peso, new { htmlAttributes = new { @class = "form-control", @id = "pesoModel" } })
                    @Html.ValidationMessageFor(model => model.peso, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <texto>Altura</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.altura, new { htmlAttributes = new { @class = "form-control", @id = "alturaModel" } })
                    @Html.ValidationMessageFor(model => model.altura, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <texto>Indice de masa corporal</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.IMC, new { htmlAttributes = new { @class = "form-control", @id = "imcModel" } })
                    @Html.ValidationMessageFor(model => model.IMC, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <texto>Grasa Corporal</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.grasacorporal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.grasacorporal, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <texto>Metabolismo Basal</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.metabolismobasal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.metabolismobasal, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <texto>Calorias Diarias</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.caloriasdiarias, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.caloriasdiarias, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <texto>Proteinas</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.proteinas, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.proteinas, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <texto>Carbohidratos</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.carbohidratos, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.carbohidratos, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <texto>Grasas</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.grasas, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.grasas, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <texto>Objetivo</texto>
                <div class="col-sm-8">
                    @Html.EditorFor(model => model.objetivo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.objetivo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <text>Fecha</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.fecha, new
                    {
                        htmlAttributes = new
                        {
                            @class = "form-control",
                            @Value = DateTime.Now.ToShortDateString(),
                            data_val = "false"
                        }
                    })

                </div>
            </div>

            <div class="form-group row">
                <div class="text mb-1" style="font-size: 14px; color: #26798e; display: none;">

                    @Html.LabelFor(model => model.idUser, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.idUser, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.idUser, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-primary" />
                    </div>
                </div>
            </div>

        </div>

    </div>
    <div class="row justify-content-center mt-3">
        <div class="col-md-6">
            <!-- Cambié col-auto por col-md-6 para extender el botón -->
            <a href="@Url.Action("Index", "AspNetUser")" class="btn btn-lg btn-primary btn-block" style="background-color: #26798e; border-color: #26798e;">Regresar</a>
        </div>

    </div>
</body>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary" })
</div>
<script>
    function calcular() {
        var peso = parseFloat(document.getElementById("peso").value);
        var altura = parseFloat(document.getElementById("altura").value);
        var edad = parseInt(document.getElementById("edad").value);
        var genero = document.getElementById("genero").value;
        var actividad = document.getElementById("actividad").value;
        var TMB;

        if (genero === "hombre") {
            TMB = (10 * peso) + (6.25 * altura) - (5 * edad) + 5;
        } else if (genero === "mujer") {
            TMB = (10 * peso) + (6.25 * altura) - (5 * edad) - 161;
        } else {
            document.getElementById("resultado").innerHTML = "Género no válido";
            return;
        }

        var caloriasDiarias;
        switch (actividad) {
            case "poco":
                caloriasDiarias = TMB * 1.2;
                break;
            case "ligero":
                caloriasDiarias = TMB * 1.375;
                break;
            case "moderado":
                caloriasDiarias = TMB * 1.55;
                break;
            case "fuerte":
                caloriasDiarias = TMB * 1.725;
                break;
            case "muy fuerte":
                caloriasDiarias = TMB * 1.9;
                break;
            default:
                caloriasDiarias = "Nivel de actividad no válido";
        }

        // Calcular IMC
        var alturaMetros = altura / 100;
        var IMC = peso / (alturaMetros * alturaMetros);

        // Redondear IMC y llenar campo correspondiente
        var IMCRounded = Math.round(IMC);
        document.getElementById("imcModel").value = IMCRounded;

        // Llenar campos de peso y altura en el formulario
        document.getElementById("pesoModel").value = peso;
        document.getElementById("alturaModel").value = altura;

        // Actualizar campos metabolismobasal y caloriasdiarias
        document.getElementById("metabolismobasal").value = TMB.toFixed(0); // Redondear sin decimales
        document.getElementById("caloriasdiarias").value = caloriasDiarias.toFixed(0); // Redondear sin decimales

        document.getElementById("resultado").innerHTML = "Tu TMB es: " + TMB.toFixed(2) + " kcal <br>Tu necesidad calórica diaria es: " + caloriasDiarias.toFixed(2) + " kcal";
    }
</script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

