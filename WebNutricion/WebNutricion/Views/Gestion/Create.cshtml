@model WebNutricion.Models.GestionModel

@{
    ViewBag.Title = "Crear Plan";
}
<div class="container">
    <div style="margin-top: 100px;"></div>
    <h1>Crear Plan</h1>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Plan de Alimentación:</h4>
            <br />

            <div class="form-group">
                <text>Desayuno</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanAlimentacion.Desayuno, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanAlimentacion.Desayuno, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Almuerzo</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanAlimentacion.almuerzo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanAlimentacion.almuerzo, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Merienda</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanAlimentacion.merienda, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanAlimentacion.merienda, "", new { @class = "text-danger" })
                </div>
                <br />

            </div>
            <div class="form-group">
                <text>Cena</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanAlimentacion.cena, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanAlimentacion.cena, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Calorias</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanAlimentacion.calorias, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanAlimentacion.calorias, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Fecha</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanAlimentacion.fecha, new { htmlAttributes = new { @class = "form-control", @Value = DateTime.Now.ToShortDateString() } })
                    @Html.ValidationMessageFor(model => model.PlanAlimentacion.fecha, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                @Html.LabelFor(model => model.PlanAlimentacion.idUser, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <!-- Aquí asignamos automáticamente el id de usuario recibido -->
                    @Html.HiddenFor(model => model.PlanAlimentacion.idUser, new { Value = ViewBag.UserId })
                </div>
            </div>

            <hr />
            <br />
            <h1>Calculadora de Calorías Diarias</h1>
            <h4>Planificación Nutricional:</h4>
            <br />
            <form id="calorieCalculator">
                <label for="peso">Peso (kg):</label>
                <input type="number" id="peso" required><br><br>

                <label for="altura">Altura (cm):</label>
                <input type="number" id="altura" required><br><br>

                <label for="edad">Edad (años):</label>
                <input type="number" id="edad" required><br><br>

                <label for="genero">Género:</label>
                <select id="genero">
                    <option value="hombre">Hombre</option>
                    <option value="mujer">Mujer</option>
                </select><br><br>

                <label for="actividad">Nivel de actividad:</label>
                <select id="actividad">
                    <option value="poco">Poco o ningún ejercicio</option>
                    <option value="ligero">Ejercicio ligero (1 - 3 días por semana)</option>
                    <option value="moderado">Ejercicio moderado (3 - 5 días por semana)</option>
                    <option value="fuerte">Ejercicio fuerte (6 - 7 días por semana)</option>
                    <option value="muy fuerte">Ejercicio muy fuerte (dos veces al día, entrenamientos muy duros)</option>
                </select><br><br>

                <button type="button" onclick="calcularCalorias()">Calcular</button>
                <br />
            </form>

            <div id="resultado"></div>
            <script>
                function calcularCalorias() {
                    var peso = parseFloat(document.getElementById("peso").value);
                    var altura = parseFloat(document.getElementById("altura").value);
                    var edad = parseInt(document.getElementById("edad").value);
                    var genero = document.getElementById("genero").value;
                    var actividad = document.getElementById("actividad").value;
                    var TMB;

                    // Calcular el IMC
                    var IMC = peso / Math.pow(altura / 100, 2);
                    // Redondear el IMC
                    var IMCRounded = Math.round(IMC);

                    // Actualizar campo IMC en el formulario
                    document.getElementById("PlanificacionNutricional_IMC").value = IMCRounded;
                    // Actualizar campos de peso y altura en el formulario
                    document.getElementById("PlanificacionNutricional_peso").value = peso;
                    document.getElementById("PlanificacionNutricional_altura").value = altura;

                    if (genero === "hombre") {
                        TMB = (10 * peso) + (6.25 * altura) - (5 * edad) + 5;
                    } else if (genero === "mujer") {
                        TMB = (10 * peso) + (6.25 * altura) - (5 * edad) - 161;
                    } else {
                        document.getElementById("resultado").innerHTML = "Género no válido";
                        return;
                    }

                    var caloriasDiarias;
                    switch (actividad) {
                        case "poco":
                            caloriasDiarias = TMB * 1.2;
                            break;
                        case "ligero":
                            caloriasDiarias = TMB * 1.375;
                            break;
                        case "moderado":
                            caloriasDiarias = TMB * 1.55;
                            break;
                        case "fuerte":
                            caloriasDiarias = TMB * 1.725;
                            break;
                        case "muy fuerte":
                            caloriasDiarias = TMB * 1.9;
                            break;
                        default:
                            caloriasDiarias = "Nivel de actividad no válido";
                    }

                    // Actualizar los campos de metabolismo basal y calorías diarias en el formulario HTML
                    document.getElementById("PlanificacionNutricional_metabolismobasal").value = TMB.toFixed(0); // Redondear sin decimales
                    document.getElementById("PlanificacionNutricional_caloriasdiarias").value = caloriasDiarias.toFixed(0); // Redondear sin decimal

                    document.getElementById("resultado").innerHTML = "Tu TMB es: " + TMB.toFixed(2) + " kcal <br>Tu necesidad calórica diaria es: " + caloriasDiarias.toFixed(2) + " kcal";
                }
            </script>

            <br />
            <!-- Resto del formulario -->

            <div class="form-group">
                <text>Peso</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.peso, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.peso, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Altura</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.altura, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.altura, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>IMC</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.IMC, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.IMC, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Grasa corporal</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.grasacorporal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.grasacorporal, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Metabolismo Basal</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.metabolismobasal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.metabolismobasal, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Calorias Diarias</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.caloriasdiarias, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.caloriasdiarias, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Proteinas</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.proteinas, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.proteinas, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Carbohidratos</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.carbohidratos, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.carbohidratos, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Grasas</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.grasas, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.grasas, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Objetivo</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.objetivo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.objetivo, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />

            <div class="form-group">
                <text>Fecha</text>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PlanificacionNutricional.fecha, new { htmlAttributes = new { @class = "form-control", @Value = DateTime.Now.ToShortDateString() } })
                    @Html.ValidationMessageFor(model => model.PlanificacionNutricional.fecha, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="form-group">
                @Html.LabelFor(model => model.PlanAlimentacion.idUser, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <!-- Aquí asignamos automáticamente el id de usuario recibido -->
                    @Html.HiddenFor(model => model.PlanAlimentacion.idUser, new { Value = ViewBag.UserId })
                </div>
            </div>
            <br />


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Guardar"class="btn btn-lg btn-primary btn-block" style="background-color: #26798e; border-color: #26798e;"/>
                </div>
            </div>
        </div>
    }
    </div>


    <style>
          body {
              background-size: cover;
              background-repeat: no-repeat;
              background-position: center;
          }

          h1 {
              font-size: 3em;
              font-weight: 300;
              line-height: 1em;
              text-align: center;
              color: #26798E;
              margin-bottom: 40px;
          }

          .container th h1 {
              font-weight: bold;
              font-size: 1em;
              text-align: left;
              color: #26798E;
          }

          /*    .container td {
            font-weight: normal;
            font-size: 1em;
            -webkit-box-shadow: 0 2px 2px -2px #0E1119;
            -moz-box-shadow: 0 2px 2px -2px #0E1119;
            box-shadow: 0 2px 2px -2px #0E1119;
        }*/



          .container td, .container th {
              padding-bottom: 2%;
              padding-top: 2%;
              padding-left: 2%;
          }

          /* Background-color of the odd rows */
          .container tr:nth-child(odd) {
              background-color: #26798E;
          }

          /* Background-color of the even rows */
          .container tr:nth-child(even) {
              background-color: #26798E;
          }

          .container th {
              background-color: #63caa7;
          }

          .container td:first-child {
              color: black;
          }

          .container tr:hover {
              background-color: #63caa7;
              -webkit-box-shadow: 0 6px 6px -6px #0E1119;
              -moz-box-shadow: 0 6px 6px -6px #0E1119;
              box-shadow: 0 6px 6px -6px #0E1119;
          }

          .container td:hover {
              background-color: #FFC172;
              color: #403E10;
              font-weight: bold;
              box-shadow: #7F7C21 -1px 1px, #7F7C21 -2px 2px, #7F7C21 -3px 3px, #7F7C21 -4px 4px, #7F7C21 -5px 5px, #7F7C21 -6px 6px;
              transform: translate3d(6px, -6px, 0);
              transition-delay: 0s;
              transition-duration: 0.4s;
              transition-property: all;
              transition-timing-function: line;
          }
    </style>
